<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2022-02-04T19:07:42+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Prabhat</title><subtitle>I&apos;m a software engineer based in Hyderabad, India, who enjoys building things.</subtitle><author><name>Prabhat</name><email>iprabhatdev@email.com</email></author><entry><title type="html">good developer</title><link href="http://localhost:4000/good-developer/" rel="alternate" type="text/html" title="good developer" /><published>2022-01-23T00:00:00+00:00</published><updated>2022-01-23T00:00:00+00:00</updated><id>http://localhost:4000/good-developer</id><content type="html" xml:base="http://localhost:4000/good-developer/"><![CDATA[<h2 id="overview"><strong>Overview</strong></h2>

<p>A ‘good developer’ is too vague. It could be a developer who knows how to properly apply TDD in practice, a developer with the performance to create a huge amount of code in an instant or a developer equipped with <a href="https://en.wikipedia.org/wiki/Software_craftsmanship">software craftsmanship</a> to the core.</p>

<p>Neither one is wrong, nor one can be said to be right. I think it would be best if I looked at various types of developers and made my own ‘good developers’ by imitating the strengths of those people.</p>

<h2 id="your-own-standards"><strong>your own standards</strong></h2>

<p>The 7 criteria I set for a good developer at the beginning of 2022 are:</p>

<ul>
  <li>high productivity</li>
  <li>reliably solve a given problem</li>
  <li>good at collaboration</li>
  <li>general, domain knowledge</li>
  <li>write stable code</li>
  <li>write clean code</li>
  <li>good at the software design</li>
</ul>

<p>Once you have set a standard, you should be able to achieve it. But how?</p>

<h3 id="to-be-more-productive"><strong>To be more productive</strong></h3>

<p>High productivity means that the number of tasks processed per unit time is large.</p>

<p>So, first of all, you need to manage your time well. I personally use the <a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">Pomodoro technique</a>.</p>

<p>Second, the work I’ve done has to be useful. In order to do that, you must first know how to answer the Why. Knowing why you are doing this will show you what you need to do, and if you know what you need to do, you will be able to think about how to secure it. If I get out of this Why - How - What cycle and do things in the reverse order or in the wrong order, my hard work turns into a piece of tissue paper or I have to make major revisions from time to time.</p>

<p>If I can manage my time well and always do only the important things, the rest is my own competence. In other words, you need to be good at coding. This requires an absolute amount of time, so the more you dig and the more you dig, the more productive you should be.</p>

<p>Personally, in development, I have experienced that the more I get used to <strong>modeling the code, the higher my productivity.</strong> Modeling the code means that the program runs freely in your head without running a separate compilation. The great developers I’ve worked with would sometimes shout, ‘Oh, I see what’s wrong,’ when a bug occurs, and find the cause right away without running the program. As I watch them, how are they different from me? This modeling is what I discovered while thinking about it.</p>

<h3 id="to-reliably-solve-a-given-problem"><strong>To reliably solve a given problem</strong></h3>

<p>This is a difficult question. You must also have the ability to solve problems, and also have the ability to predict and prepare for various variables in solving the problem. The meticulous attention to detail here is an added bonus.</p>

<p>Since problem-solving ability is a comprehensively required ability at various levels such as the code level and the decision-making level within the team, it is necessary to have quick judgment and experience. As you gain experience, you will be able to make some predictions about what will happen in the future if something similar happens.</p>

<p>In other words, this question turns into how to get a lot of experiences that help growth in a short time and how to handle things with meticulous care. Getting a lot of experience in a short amount of time always puts me in an uncomfortable zone. If something is repetitive, you should automate it and always crave something new.</p>

<p>I am not a meticulous person by nature, so I worked hard to be meticulous. Self-review of the code I’ve written, or check it out by deploying it instead of finishing testing locally. When combined with Pomodoro, when I think about what I am currently doing during my break time, I can recall the parts I missed.</p>

<h3 id="to-collaborate-well"><strong>To collaborate well</strong></h3>

<p>In order to collaborate well, communication skills are essential. I should always be on the lookout for inefficiencies when communicating my intentions clearly and discussing them without hurting the other person’s feelings.</p>

<p>A good example of being wary of inefficiencies is ubiquitous language. By defining a common domain language between domain experts and developers, the inefficiency of word choices and explanations is blocked in the first place.</p>

<h3 id="in-general-domain-knowledge">In <strong>general, domain knowledge</strong></h3>

<p>Domain knowledge is the understanding of your domain. Be it product, software, technologies, or the business to which you are contributing.</p>

<p>First, in order to increase general knowledge, you should actively do several projects for proof of concept. Many won’t agree but this is what has been worked out for me.</p>

<h3 id="to-write-stable-code"><strong>To write stable code</strong></h3>

<p>Stable code is, after all, bug-free code. In fact, it is impossible to completely eliminate the bug. This is because unexpected bugs pop up even if you test for all the assumed cases. Our goal is to make it bug-free in every case we assume.</p>

<p>The best way is to do TDD. If you do TDD, you have no choice but to make the module easier to test, and the code becomes simpler when dependencies are organized, making it easier to follow the KISS principle.</p>

<h3 id="to-write-clean-code"><strong>To write clean code</strong></h3>

<p>The definition of clean code is as diverse as the number of developers. However, as a rule, the clean code I define here is Uncle Bob’s <a href="https://en.wikipedia.org/wiki/Robert_C._Martin">Clean code</a>.</p>

<p>This book is a lot to read, a lot to follow, and a lot to experience. I’ve read this book two times since I was an undergraduate, but every time I look at it, something new catches my eye. In the past, the content that said, ‘What is it?’ It means that the moment of ‘Wow…’ will come. Uncle Bob is in a far-off state, and every time I leveled up, I was only able to get what I could see from my height, step by step.</p>

<h3 id="to-be-good-at-the-software-design"><strong>To be good at the software design</strong></h3>

<p>A good software design is one that delays decision-making as much as possible. A decision made after getting as much information as possible is always better than a decision not made.</p>

<p>To be good at this, you need to be good at an abstract painting, which you learned in college. By distinguishing which domains and non-domains are, it should be possible to abstract all non-domains and invert dependencies. However, it is difficult to distinguish between domains and non-domains. At this time, if you have a lot of general knowledge, you can get more help.</p>]]></content><author><name>Prabhat</name><email>iprabhatdev@email.com</email></author><category term="dev" /><category term="software-design" /><summary type="html"><![CDATA[Be a good developer]]></summary></entry><entry><title type="html">Test driven development</title><link href="http://localhost:4000/Test-driven-development/" rel="alternate" type="text/html" title="Test driven development" /><published>2022-01-05T00:00:00+00:00</published><updated>2022-01-05T00:00:00+00:00</updated><id>http://localhost:4000/Test-driven-development</id><content type="html" xml:base="http://localhost:4000/Test-driven-development/"><![CDATA[<h1 id="test-driven-development">Test driven development</h1>

<p>If you want to understand the basics of the TDD, please read this <a href="https://www.freecodecamp.org/news/test-driven-development-what-it-is-and-what-it-is-not-41fa6bca02a2/">freecodecamp blog.</a></p>

<h3 id="3-rules-to-follow-while-doing-tdd">3 rules to follow while doing TDD</h3>
<p>Bob Martin describes Test-Driven Development using these three simple rules:</p>

<ol>
  <li>Do not write production code unless it is to make a failing unit test pass.</li>
  <li>Do not write more of a unit test than is sufficient to fail, and build failures are failures.</li>
  <li>Do not write more production code than is sufficient to pass the one failing unit test.</li>
</ol>

<p>Even though this sounds restrictive, it is a very productive and fun way to develop software.</p>
<h3 id="which-tests-should-i-write-first">Which tests should I write first?</h3>

<p><strong>Simplest, but interesting</strong> : Write the most concise and meaningful tests you can think of.</p>

<h3 id="order-of-tdd">Order of TDD</h3>

<p>red ➡ green ➡ refactor cycle</p>

<ol>
  <li>Write test before production code</li>
  <li>Writing the minimum code for failing test(RED)</li>
  <li>Write simplest code passing the test (GREEN)</li>
  <li>Refactoring (go back to 2, if no more test cases come to mind, go to 5)</li>
  <li>Don’t write any test before passing existing ones</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">Note:</code> Step 4 is not optional. If step 4 is ignored, the code is dirty even after TDD.</p>

<p>Remember that refactoring is a natural and natural thing to do, comparable to washing your hands after using the bathroom.</p>

<h3 id="getting-stuck">Getting stuck</h3>

<p>There are times when you will get stuck during test-driven development. In this case, the writer runs into the idea that he can’t make all the test cases pass unless he erases and rewrites the existing code.</p>

<p>It is mainly caused by the following two cases.</p>

<ul>
  <li>you wrote the wrong test</li>
  <li>The prod code is too specific (mainly occurs if you do not follow the principle of Most simple, but interesting)</li>
</ul>

<h3 id="tdd-benefits">TDD Benefits</h3>

<ul>
  <li>Because the specification is set first and the prod code is implemented, the developer eliminates unnecessary thoughts when writing the code.</li>
  <li>Because we write the tests first, the code is decoupled. Naturally, a good design can be obtained.</li>
</ul>

<h3 id="ui-test">UI Test?</h3>

<p>Since the UI is exposed to too many changes, it can take more time and effort to write very specific test code.</p>

<p>Usually, UI tests are often omitted, and even if they are written, they are written very rough. Rough means that the React action is properly triggered and the style of the component with a certain text is changed as desired.</p>

<p>It is sometimes replaced with a visual regression test. A typical library for this is <a href="https://storybook.js.org/docs/guides/guide-react/">storybook</a> .</p>

<h3 id="practice-tdd">Practice TDD</h3>

<p>Just google “TDD kata”. </p>

<h3 id="tests--tdd">Tests != TDD</h3>
<p>Writing tests does not mean TDD. TDD is when your design is guided by the tests. By following the red, green, refactor steps the design will emerge through writing the minimal amount of code to make your tests pass.</p>

<p>If you write all of your code first then go back to add tests, you are not using TDD.</p>

<h3 id="gradual-improvement">gradual improvement</h3>

<p>If you do TDD, you will naturally do refactoring, and if you separate modules by responsibility through refactoring, you will naturally get a good design. This is called gradual improvement.</p>

<p>What this means is that it is much more efficient to not get too hung up on design from the start, but to draw a rough design on the blackboard and then try to implement it directly. Because pretty diagrams can only be obtained when the implementation is complete.</p>

<p>According to someone who has actually experienced it, it goes something like this:</p>

<ol>
  <li>Write a test that passes</li>
  <li>Once implemented through TDD as per requirements</li>
  <li>Refactoring until the design is revealed through refactoring in TDD</li>
  <li>Looking at the architecture, separation of responsibilities. At this stage, all operations have already been performed successfully, and since the test has been obtained, changes are possible.</li>
  <li>refactoring</li>
  <li>Create a diagram to express your design</li>
</ol>

<h3 id="black-box-testing--white-box-testing">Black-box testing &amp; White-box testing</h3>

<ul>
  <li>White-box: Test the internal source code. Write tests for conditional statements in if/while and trace all executable paths.</li>
  <li>Black-box: A method of inspecting the operation without knowing the internal structure or principle of operation of the software, giving correct and incorrect inputs, and checking whether the software operates as expected.</li>
</ul>

<p>These are just some of my thoughts regarding it. I will write about it more clearly and in a structured way later on.</p>

<p><strong>Some good reads:</strong></p>

<ul>
  <li><a href="https://www.freecodecamp.org/news/test-driven-development-what-it-is-and-what-it-is-not-41fa6bca02a2/">freecodecamp blog</a></li>
  <li><a href="https://www.tddfellow.com/blog/2016/08/31/getting-stuck-while-doing-tdd-part-3-triangulation-to-the-rescue/">tddfellow</a></li>
  <li><a href="https://www.freecodecamp.org/news practical-tdd-test-driven-development-84a32044ed0b/">practical tdd</a></li>
  <li><a href="https://medium.com/javarevisited/tdd-katas-5e897300a887">kata blog</a></li>
</ul>]]></content><author><name>Prabhat</name><email>iprabhatdev@email.com</email></author><category term="tdd" /><category term="software-design" /><summary type="html"><![CDATA[Test driven development]]></summary></entry><entry><title type="html">docker-compose basics</title><link href="http://localhost:4000/docker-compose-bascis/" rel="alternate" type="text/html" title="docker-compose basics" /><published>2021-07-14T00:00:00+00:00</published><updated>2021-07-14T00:00:00+00:00</updated><id>http://localhost:4000/docker-compose-bascis</id><content type="html" xml:base="http://localhost:4000/docker-compose-bascis/"><![CDATA[<h1 id="getting-started-with-docker-compose">Getting started with Docker Compose</h1>

<p><em>NOTE: This isn’t a Docker tutorial. It assumes you to have a basic knowledge of Docker and the problems it solves.</em></p>

<p><a href="https://docs.docker.com/compose/">Docker Compose</a> is a tool for defining and managing applications which consist of multiple Docker containers.</p>

<p>To begin with, let’s create some working directories;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>docker_compose_basics
<span class="nb">cd </span>docker_compose_basics
<span class="nb">mkdir </span>api web
</code></pre></div></div>

<p>Before we get started on the Docker stuff, we will create two simple applications; an API and a web server. I’ve chosen to write the API in <a href="https://golang.org/">Go</a> and the web server in <a href="https://nodejs.org/en/">Node</a> to keep things interesting. All the code is provided so don’t worry if you are unfamiliar with these are technologies.</p>

<h3 id="1-json-api">1) JSON API</h3>

<p><strong>1.1) Writing a simple API in Go</strong></p>

<p>Go inside the <code class="language-plaintext highlighter-rouge">API</code> directory and create a file named <code class="language-plaintext highlighter-rouge">api.go</code></p>

<p>In this file we will define some structures and hardcode some data. The  <code class="language-plaintext highlighter-rouge">main</code> function simply listens to the root path on port 80 and returns a JSON response containing all the data in response to all requests.I hardcoded the data in an effort to keep things minimal. By the end of this post you will have the knowledge to enable you to move that data into a real database, also managed by Docker Compose.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>
<span class="k">import</span> <span class="p">(</span>
    <span class="s">"encoding/json"</span>
    <span class="s">"log"</span>
    <span class="s">"net/http"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">film</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Universe</span>    <span class="kt">string</span>   <span class="s">`json:"universe"`</span>
    <span class="n">Title</span>       <span class="kt">string</span>   <span class="s">`json:"title"`</span>
    <span class="n">Year</span> 	 	<span class="kt">int</span>      <span class="s">`json:"int"`</span>
<span class="p">}</span>

<span class="k">var</span> <span class="n">films</span> <span class="o">=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="n">film</span><span class="p">{</span>
    <span class="p">{</span><span class="s">"Marvel"</span><span class="p">,</span> <span class="s">"Iron Man"</span><span class="p">,</span> <span class="m">2008</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"DC"</span><span class="p">,</span> <span class="s">"The Dark Knight"</span><span class="p">,</span> <span class="m">2008</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"Marvel"</span><span class="p">,</span> <span class="s">"The Avengers"</span><span class="p">,</span> <span class="m">2012</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"DC"</span><span class="p">,</span> <span class="s">"Man of Steel"</span><span class="p">,</span> <span class="m">2013</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"Marvel"</span><span class="p">,</span> <span class="s">"Black Panther"</span><span class="p">,</span> <span class="m">2018</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"DC"</span><span class="p">,</span> <span class="s">"Justice League"</span><span class="p">,</span> <span class="m">2017</span><span class="p">},</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">http</span><span class="o">.</span><span class="n">HandleFunc</span><span class="p">(</span><span class="s">"/"</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">j</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">json</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">films</span><span class="p">)</span>
        <span class="n">w</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"Content-Type"</span><span class="p">,</span> <span class="s">"application/json"</span><span class="p">)</span>
        <span class="n">w</span><span class="o">.</span><span class="n">Write</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="n">log</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">ListenAndServe</span><span class="p">(</span><span class="s">":80"</span><span class="p">,</span> <span class="no">nil</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Let’s make sure everything works.</p>

<p><code class="language-plaintext highlighter-rouge">go run api.go</code></p>

<p>and in other terminal run</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl localhost

<span class="o">[{</span><span class="s2">"universe"</span>:<span class="s2">"Marvel"</span>,<span class="s2">"title"</span>:<span class="s2">"Iron Man"</span>,<span class="s2">"int"</span>:2008<span class="o">}</span>,<span class="o">{</span><span class="s2">"universe"</span>:<span class="s2">"DC"</span>,<span class="s2">"title"</span>:<span class="s2">"The Dark Knight"</span>,<span class="s2">"int"</span>:2008<span class="o">}</span>,..
</code></pre></div></div>

<p>Looks good! If you don’t have <code class="language-plaintext highlighter-rouge">go</code>installed you can skip this step and trust that it works - you’ll be able to run this code in a minute via Docker anyway.</p>

<p><img src="./server.png" alt="" /></p>

<p><strong>1.2) Dockerizing the Go API</strong></p>

<p>Create another file in the api directory name Dockerfile.</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> golang:alpine</span>
<span class="k">WORKDIR</span><span class="s"> /go/src/api</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">RUN </span>go <span class="nb">install</span> <span class="nt">-v</span> ./...
<span class="k">CMD</span><span class="s"> ["api"]</span>
</code></pre></div></div>

<p>This Dockerfile is pretty much as simple. In short we are defining an image using the  <code class="language-plaintext highlighter-rouge">golang:alpine</code> base image, copying our code and running it.</p>

<p>When your application becomes more complex, fetching dependencies etc, this file will need to reflect those changes.</p>

<p>Ok, let’s try out our container using the Docker cli. Note that we’re mapping the port from 80-&gt;8091. I’m not going to explain the other flags passed to these commands, please refer to the <a href="https://docs.docker.com/engine/reference/commandline/cli/">documentation</a>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~ docker build <span class="nt">-t</span> docker-compose-basics-api <span class="nb">.</span>
~ docker run <span class="nt">-p</span> 8091:80/tcp <span class="nt">-it</span> <span class="nt">--rm</span> docker-compose-basics-api
..
~ curl localhost:8091
<span class="o">[{</span><span class="s2">"universe"</span>:<span class="s2">"Marvel"</span>,<span class="s2">"title"</span>:<span class="s2">"Iron Man"</span>,<span class="s2">"int"</span>:2008<span class="o">}</span>,<span class="o">{</span><span class="s2">"universe"</span>:<span class="s2">"DC"</span>,<span class="s2">"title"</span>:<span class="s2">"The Dark Knight"</span>,<span class="s2">"int"</span>:2008<span class="o">}</span>,..
</code></pre></div></div>

<p>Great, our container works too.</p>

<p><em>Now you can be sure the code works if you skipped it the first time. If you’re new to Docker, this demonstrates the power of it. You can run code without installing the specific compiler/runtime 👍.</em></p>

<h3 id="2-web-server"><em>2) Web server</em></h3>

<p><strong>2.1) Writing a simple web server in Node</strong></p>

<p>Go inside the <code class="language-plaintext highlighter-rouge">web</code> directory, create new file named <code class="language-plaintext highlighter-rouge">index.js</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">&lt;p&gt;No films.&lt;/p&gt;</span><span class="dl">'</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">text/html</span><span class="dl">'</span> <span class="p">})</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">`&lt;html&gt;&lt;body&gt;&lt;h1&gt;Films&lt;/h1&gt;</span><span class="p">${</span><span class="nx">content</span><span class="p">}</span><span class="s2">&lt;/body&gt;&lt;/html&gt;`</span><span class="p">)</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
<span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">)</span>
</code></pre></div></div>

<p>Keeping this simple. This code will create a web server listening on port 80 which will return some HTML.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~ node index.js
..
~ curl localhost
&lt;html&gt;&lt;body&gt;&lt;h1&gt;Films&lt;/h1&gt;No Movies.&lt;/body&gt;&lt;/html&gt;
</code></pre></div></div>

<p><strong>2.2) Dockerizing the Node web server</strong></p>

<p>Next, create a <code class="language-plaintext highlighter-rouge">Dockerfile</code> in the <code class="language-plaintext highlighter-rouge">web</code> directory</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> node:alpine</span>
<span class="k">WORKDIR</span><span class="s"> /docker-compose-basics/web</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">RUN </span>npm <span class="nb">install</span> <span class="nt">--prod</span>
<span class="k">CMD</span><span class="s"> ["node", "index.js"]</span>
</code></pre></div></div>

<p>Let’s run it and make sure it works. Note that this image has a slightly different name and port.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~ docker build -t docker-compose-basics-web .
~ docker run -p 8092:80/tcp --init -it --rm docker-compose-basics-web
..
~ curl localhost:8092
&lt;html&gt;&lt;body&gt;&lt;h1&gt;Movies&lt;/h1&gt;&lt;p&gt;No Movies.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</code></pre></div></div>

<p>Awesome, this one works too.</p>

<h3 id="3-creating-the-docker-compose-file">3) Creating the Docker Compose file</h3>

<p>Finally, we’re here. Create <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> in the top level directory <code class="language-plaintext highlighter-rouge">docker_compose_bascis</code>.</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>version: "3"
services:
  movies-api:
    build: ./api
    ports:
      - 8091:80
  movies-web:
    build: ./web
    ports:
      - 8092:80
    depends_on:
      - movies-api
</code></pre></div></div>

<p>That’s it.</p>

<p>We’ve defined two services named <code class="language-plaintext highlighter-rouge">movies-api</code> and <code class="language-plaintext highlighter-rouge">movies-web</code>. Until now we had to use <code class="language-plaintext highlighter-rouge">docker build</code> to build our images. Docker Compose handles this for us, it just needs to be pointed to the directory containing the Dockerfile. We have also exposed our ports as we did previously in <code class="language-plaintext highlighter-rouge">docker run</code>.</p>

<p>Also we’ve introduced a new concept; <code class="language-plaintext highlighter-rouge">depends_on</code>. This tells Docker Compose that films-web depends on <code class="language-plaintext highlighter-rouge">movies-api</code>. This is especially useful when you have many services and databases. Internally this just ensures that the API is started before the web service. It does <strong>NOT</strong> wait for the API to be ‘ready’, to handle this please read the <a href="https://docs.docker.com/compose/startup-order/">documentation</a>.</p>

<p>Let’s give it a try… with one simple command;</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">--build</span>
</code></pre></div></div>

<p>Awesome, both services are up and running as expected;</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~ curl localhost:8091
<span class="o">[{</span><span class="s2">"universe"</span>:<span class="s2">"Marvel"</span>,<span class="s2">"title"</span>:<span class="s2">"Iron Man"</span>,<span class="s2">"int"</span>:2008<span class="o">}</span>,<span class="o">{</span><span class="s2">"universe"</span>:<span class="s2">"DC"</span>,<span class="s2">"title"</span>:<span class="s2">"The Dark Knight"</span>,<span class="s2">"int"</span>:2008<span class="o">}</span>,..

~ curl localhost:8092
&lt;html&gt;&lt;body&gt;&lt;h1&gt;Movies&lt;/h1&gt;&lt;p&gt;No Movies.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</code></pre></div></div>

<p>You can also run in detached mode by adding the <code class="language-plaintext highlighter-rouge">-d</code> flag. Later you can stop it by running <code class="language-plaintext highlighter-rouge">docker-compose down</code>.</p>

<h3 id="4-enabling-service-communication">4) Enabling service communication</h3>

<p>We need our web server to fetch the films from the API. Hardcoding IP addresses/host names/ports in our services is far too brittle and error prone.</p>

<p>Fortunately, Docker Compose makes this really easy. Each service joins a common network with the name of the service defined in <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> used as the hostname.</p>

<p>Let’s update the web server to talk to the API. Replace <code class="language-plaintext highlighter-rouge">index.js</code> with the following code;</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">)</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="dl">''</span>
        
            <span class="nx">res</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">data</span> <span class="o">+=</span> <span class="nx">chunk</span>
            <span class="p">})</span>
        
            <span class="nx">res</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">end</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">resolve</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
            <span class="p">})</span>
        <span class="p">}).</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">,</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">})</span>
<span class="p">}</span>
<span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="k">async</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
    <span class="kd">const</span> <span class="nx">movies</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://movies-api</span><span class="dl">'</span><span class="p">)</span>
    <span class="kd">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">movies</span>
        <span class="p">.</span><span class="nx">map</span><span class="p">(({</span> <span class="nx">universe</span><span class="p">,</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">year</span> <span class="p">})</span> <span class="o">=&gt;</span> 
            <span class="s2">`</span><span class="p">${</span><span class="nx">universe</span><span class="p">}</span><span class="s2"> (</span><span class="p">${</span><span class="nx">title</span><span class="p">}</span><span class="s2">) - Released on </span><span class="p">${</span><span class="nx">year</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">list</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s2">`</span><span class="p">${</span><span class="nx">list</span><span class="p">}</span><span class="s2">&lt;li&gt;</span><span class="p">${</span><span class="nx">str</span><span class="p">}</span><span class="s2">&lt;/li&gt;`</span><span class="p">,</span> <span class="dl">''</span><span class="p">)</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">text/html</span><span class="dl">'</span> <span class="p">})</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">`&lt;html&gt;&lt;body&gt;&lt;h1&gt;Movies&lt;/h1&gt;&lt;ul&gt;</span><span class="p">${</span><span class="nx">content</span><span class="p">}</span><span class="s2">&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;`</span><span class="p">)</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
<span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">80</span><span class="p">)</span>
</code></pre></div></div>

<p>I’ve implemented a naive  <code class="language-plaintext highlighter-rouge">fetch()</code>  function rather than pulling in a dependency - again keeping things simple. You’ll see that we can now refer to the API using the service name defined in the Docker Compose file as the hostname;  <code class="language-plaintext highlighter-rouge">fetch('http://movies-api')</code>.</p>

<p>The result is;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~ docker-compose up <span class="nt">--build</span>
..
~ curl localhost:8092
&lt;html&gt;&lt;body&gt;&lt;h1&gt;Movies&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Marvel <span class="o">(</span>Iron Man<span class="o">)</span> - Released on 2008 ...
</code></pre></div></div>

<p>So that’s it. Maybe later on I will write a tutorial for docker-compose with volumes in it.</p>

<p>You can find the code in <a href="https://github.com/TheCaffeineDev/docker-compose-basics">Github</a>.</p>

<p>If you have any questions, recommendations, or critiques, I can be reached via <a href="https://twitter.com/thecaffeinedev">Twitter</a> or via my <a href="mailto:iprabhatdev@gmail.com">mail</a>. Feel free to reach out to me.</p>]]></content><author><name>Prabhat</name><email>iprabhatdev@email.com</email></author><category term="docker" /><summary type="html"><![CDATA[docker-compose basics]]></summary></entry><entry><title type="html">docker cheatsheet</title><link href="http://localhost:4000/docker-cheatsheet/" rel="alternate" type="text/html" title="docker cheatsheet" /><published>2021-06-16T00:00:00+00:00</published><updated>2021-06-16T00:00:00+00:00</updated><id>http://localhost:4000/docker-cheatsheet</id><content type="html" xml:base="http://localhost:4000/docker-cheatsheet/"><![CDATA[<h1 id="docker-cheatsheet">Docker Cheatsheet</h1>

<h2 id="basics">Basics</h2>

<h3 id="dockerfile">Dockerfile</h3>

<p>A text file that contains all commands, in order, needed to build a given image. A Dockerfile adheres to a specific format and set of instructions which you can find at <a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference</a>. You can also find common <a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">Best Practices</a> on the official website.</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> python:3.8-alpine</span>
<span class="k">RUN </span><span class="nb">mkdir</span> /app
<span class="k">ADD</span><span class="s"> . /app</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">RUN </span>pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
<span class="k">CMD</span><span class="s"> ["python", "app.py"]</span>
</code></pre></div></div>

<h3 id="multi-stage-builds">Multi-stage builds</h3>

<p>With <a href="https://docs.docker.com/develop/develop-images/multistage-build/">multi-stage builds</a>, you use multiple FROM statements in your Dockerfile. Each FROM instruction can use a different base, and each of them begins a new stage of the build. You can selectively copy artifacts from one stage to another, leaving behind everything you don’t want in the final image.</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> nginx</span>

<span class="k">EXPOSE</span><span class="s"> 8000</span>

<span class="k">COPY</span><span class="s"> --from=builder /app/build /usr/share/nginx/html</span>
</code></pre></div></div>

<h3 id="dockerignore">.dockerignore</h3>

<p>To exclude files not relevant to the build use a <a href="https://docs.docker.com/engine/reference/builder/#dockerignore-file">dockerignore</a> file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>__pycache__
*.pyc
*.pyo
*.pyd
env
pip-log.txt
pip-delete-this-directory.txt
.coverage.*
.cache
coverage.xml
*.cover
*.log
.mypy_cache
.pytest_cache
.hypothesis
</code></pre></div></div>

<h2 id="images">Images</h2>

<p>An <a href="https://docs.docker.com/language/nodejs/build-images/">image</a> is an executable package that includes everything needed to run an application - the code, a runtime, libraries, environment variables, and configuration files.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build .                          # Build image
docker build -t &lt;image&gt;:&lt;tag&gt; .         # Build image with tag
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker images -a                        # List all images on this machine
docker image rm &lt;image&gt;                 # Remove image from this machine
</code></pre></div></div>

<h2 id="containers">Containers</h2>

<p>A <a href="https://docs.docker.com/language/nodejs/run-containers/">container</a> is a runtime instance of an image - what the image becomes in memory when executed.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker create -t &lt;image&gt;                # Create container
docker start -i &lt;container&gt;             # Start container
docker run -it &lt;image&gt;                  # Create and start container
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker ps -a                            # Show all running containers
docker container ls -a                  # Show all containers

docker stop &lt;container&gt;                 # Gracefully stop the container
docker kill &lt;container&gt;                 # Force shutdown of the container
docker rm &lt;container&gt;                   # Remove container from this machine
</code></pre></div></div>

<h2 id="utility">Utility</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Remove all unused containers, networks and images
docker system prune

# Remove all unused volumes
docker volume prune

# Stop all running containers
docker stop $(docker ps -aq)

# Delete all stopped containers
docker rm $(docker ps -aq)
</code></pre></div></div>

<h2 id="debug">Debug</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker logs &lt;container&gt;
docker exec -it &lt;container&gt; &lt;command&gt;
</code></pre></div></div>

<h2 id="volumes">Volumes</h2>

<h3 id="host-volumesbind-mounts">Host volumes/Bind Mounts</h3>

<p>Use bind mounts to give your container access to your source code. The physical host file system is mounted into the virtual file system. Changes are propagated back to the Docker host.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -v /home/caffeinedev/work:/var/lib/postgresql/data
</code></pre></div></div>

<h3 id="anonymous-volumes">Anonymous Volumes</h3>

<p>The location of anonymous volumes is managed by Docker. Note that it can be difficult to refer to the same volume when it is anonymous. Anonymous volumes have no specific source so when the container is deleted, instruct the Docker Engine daemon to remove them.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -v /var/lib/postgresql/data
</code></pre></div></div>

<h3 id="named-volumes">Named volumes</h3>

<p>Named volumes can be referred to by specific names.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -v data:/var/lib/postgresql/data
</code></pre></div></div>

<h2 id="configuration">Configuration</h2>

<p>For production, use secrets to store sensitive application data used by services, and use configs for non-sensitive data such as configuration files.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker config create
docker secret create
</code></pre></div></div>

<h2 id="docker-compose">Docker-Compose</h2>

<p><a href="https://docs.docker.com/compose/">Compose</a>  is a tool for defining and running multi-container Docker applications.</p>

<h3 id="basics-1">Basics</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up                     # Create and start one or more containers
docker-compose up -d                  # Don't show terminal
docker-compose up --build             # Force rebuilding
docker-compose up --force-recreate    # Force recreate

docker-compose -f docker-compose.override.yml up

docker-compose down
docker-compose ps -a
</code></pre></div></div>

<p>Docker-compose is a whole different topic to talk about. Maybe I will write a different blog post for it.</p>]]></content><author><name>Prabhat</name><email>iprabhatdev@email.com</email></author><category term="docker" /><summary type="html"><![CDATA[Docker Cheatsheet]]></summary></entry><entry><title type="html">Building and Installing OpenCV on M1 Macbook</title><link href="http://localhost:4000/Building-and-Installing-OpenCV-on-M1-Macbook/" rel="alternate" type="text/html" title="Building and Installing OpenCV on M1 Macbook" /><published>2021-05-28T00:00:00+00:00</published><updated>2021-05-28T00:00:00+00:00</updated><id>http://localhost:4000/Building-and-Installing-OpenCV-on-M1-Macbook</id><content type="html" xml:base="http://localhost:4000/Building-and-Installing-OpenCV-on-M1-Macbook/"><![CDATA[<p><img src="./cvm1.png" alt="Cover image" />
In this blog post, we are going to build and install OpenCV on anM1 Mac.</p>

<p>Last year in November 2020 apple releases their first ARM64-based M1 chip. It got a lot of attention from everyone.</p>

<p>Being a tech enthusiast and a programmer, I was amazed to see the performance of the new apple M1 chip. The benchmarks were really good.</p>

<p>Recently only some months back, I bought myself an M1 Macbook Pro with 8Gigs of RAM and 512GB of SSD.
Let’s get started.</p>

<p>Here are the things that we are going to do.</p>

<p>Here are the things that we are going to do.</p>

<ul>
  <li>Step 1: Homebrew and Xcode Command Line Tools Installation</li>
  <li>Step2: Install Miniforge</li>
  <li>Step3: Create a virtual environment with python3.8</li>
  <li>Step4: Install necessary dependencies</li>
  <li>Step5: Compile and Build OpenCV</li>
  <li>Step6: Test OpenCV</li>
</ul>

<h1 id="step1-homebrew-and-xcode-cli-installation">Step1: Homebrew and XCode CLI Installation</h1>

<p>If Homebrew is not already installed in your system you can install it by running the following in your terminal.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

</code></pre></div></div>

<p>After it gets installed, install wget and CMake.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install wget cmake
</code></pre></div></div>

<p>I have already installed Xcode Command Line Tools on my mac. If it’s not already installed in your system, you can install it by running the following command below in your terminal.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xcode-select --install
</code></pre></div></div>

<h2 id="step2-install-miniforge">Step2: Install Miniforge</h2>

<p>Install miniforge for arm64 (Apple Silicon) from <a href="https://github.com/conda-forge/miniforge">miniforge GitHub</a>.</p>

<p>Miniforge enables installing python packages natively compiled for Apple Silicon.</p>

<p>After the installation of miniforge, by default, it gives us one base environment. You can turn off the default base env by running</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda config --set auto_activate_base false
</code></pre></div></div>

<h2 id="step3-create-a-virtual-environment">Step3: Create a virtual environment</h2>

<p>Let’s create a virtual environment named mlp with python3.8 installed.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create --name testcv python=3.8
</code></pre></div></div>

<p><img src="https://miro.medium.com/max/700/1*NIKNl9-7FvfL3go-NPR8uQ.png" alt="" /></p>

<p>And activate it by running</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda activate testcv

</code></pre></div></div>

<h2 id="step4-installing-some-dependencies">Step4: Installing Some Dependencies</h2>

<p>As we are going to install OpenCV natively we have to install the compatible version of Numpy which Apple provides for M1.</p>

<p>Run the following commands below on a terminal to install Numpy</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/apple/tensorflow_macos/releases/download/v0.1alpha3/tensorflow_macos-0.1alpha3.tar.gz

tar -xvf tensorflow_macos-0.1alpha3.tar.gzcd tensorflow_macos/arm64

cd tensorflow_macos/arm64

pip install --upgrade --no-dependencies --force numpy-1.18.5-cp38-cp38-macosx_11_0_arm64.whl

cd ~

</code></pre></div></div>

<h2 id="step5-compile-and-build-opencv">Step5: Compile and Build OpenCV</h2>

<p>We have to download OpenCV and OpenCV Contrib first.</p>

<p>I have created one folder named test_opencv where I will be downloading files and build there.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
wget -O opencv.zip https://github.com/opencv/opencv/archive/4.5.0.zip

wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.5.0.zip

unzip opencv.zip &amp;&amp; unzip opencv_contrib.zip

cd opencv-4.5.0

mkdir build &amp;&amp; cd build

</code></pre></div></div>

<p>Let’s Set up the OpenCV build with CMake:</p>

<p>Make sure to put your own PATH on OPENCV_EXTRA_MODULES</p>

<p>Also, make sure to activate your conda environment before running make.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda activate testcv

</code></pre></div></div>

<p>You have to put your Python3 executable path also. You can get it by running</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo $CONDA_PREFIX
</code></pre></div></div>

<p><img src="https://miro.medium.com/max/700/1*IZc7yOIpjLtfaj4KlRU1DA.png" alt="" /></p>

<p>For eg: My path is</p>

<p><em>/opt/homebrew/Caskroom/miniforge/base/envs/testcv/</em></p>

<p>So I have put</p>

<p><em>/opt/homebrew/Caskroom/miniforge/base/envs/testcv/bin/python3</em></p>

<p>You have to change and put your own path there.</p>

<p>Now you can run</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
cmake \
 DCMAKE_SYSTEM_PROCESSOR=arm64 \
-DCMAKE_OSX_ARCHITECTURES=arm64 \
-DWITH_OPENJPEG=OFF \
-DWITH_IPP=OFF \
-D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D OPENCV_EXTRA_MODULES_PATH=/Users/caffeinedev/Prabhat/Workspace/test_opencv/opencv_contrib-4.5.0/modules \
-D PYTHON3_EXECUTABLE=/opt/homebrew/Caskroom/miniforge/base/envs/testcv/bin/python3 \
-D BUILD_opencv_python2=OFF \
-D BUILD_opencv_python3=ON \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D INSTALL_C_EXAMPLES=OFF \
-D OPENCV_ENABLE_NONFREE=ON \
-D BUILD_EXAMPLES=ON ..

</code></pre></div></div>

<p>Snapshots</p>

<p><img src="https://miro.medium.com/max/700/1*7ERmg-sL7tL5SGQfAAcwMg.png" alt="" /></p>

<p>You will see the screen below after Cmake. The compilation doesn’t take that much time.</p>

<p><img src="https://miro.medium.com/max/700/1*QgSSYmqBrJ3MP4S7wYjvQA.png" alt="" /></p>

<p>Now we have the run the make command.</p>

<p>Here j8 stands for 8 cores. You can do either make or you can adjust the j option. So let’s run</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make -j8

</code></pre></div></div>

<p>You will get an output like the below. It took around 10 minutes for me.</p>

<p><img src="https://miro.medium.com/max/700/1*GLl6bTvsk8yjqx-yHORpWQ.png" alt="" /></p>

<p>Then the last step is to run</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo make install

</code></pre></div></div>
<p><img src="https://miro.medium.com/max/700/1*nqZVMgbuGbe3AKqBCTJ08w.png" alt="" /></p>

<p>You will get the above after sudo make install.</p>

<h4 id="sym-link-opencv-4-on-macos-to-virtual-environment-site-packages">Sym-link OpenCV 4 on macOS to virtual environment site-packages</h4>

<p>We need to first locate the .so file, which has been generated during the compilation of OpenCV.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mdfind cv2.cpython
</code></pre></div></div>
<p><img src="https://miro.medium.com/max/700/1*98ZgMVdER2yyTYpADnRLXg.png" alt="" /></p>

<p>Now, we need to execute the following to sym-link one of the .so files in our current Python virtual environment.</p>

<p>You can see this from the screenshot. There’s one so file that has been generated inside the build folder. The path to the .so file in my system is</p>

<p>Also, Please double-check the paths before executing the commands.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Users/caffeinedev/Prabhat/Workspace/test_opencv/opencv-4.5.0/build/lib/python3/cv2.cpython-38-darwin.so
</code></pre></div></div>

<p>Open up another terminal and go to your python environment site-packages directory. 
In my case it’s</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /opt/homebrew/Caskroom/miniforge/base/envs/testcv/lib/python3.8/site-packages

</code></pre></div></div>

<p>And execute the sym-link</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ln -s /Users/caffeinedev/Prabhat/Workspace/test_opencv/opencv-4.5.0/build/lib/python3/cv2.cpython-38-darwin.so
</code></pre></div></div>

<p><img src="https://miro.medium.com/max/700/1*aMaG42tkpAiEQ1KTpWS8_A.png" alt="" /></p>

<p>This I ran on my second terminal.</p>

<p>And that’s it. Now we are good to go.</p>

<p>Open a separate terminal if you want and activate your virtual environment</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda activate testcv
</code></pre></div></div>
<p>And just run the below</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3
</code></pre></div></div>
<p>And</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import cv2
cv2.__version__
</code></pre></div></div>

<p><img src="https://miro.medium.com/max/700/1*m-6LenCf8cwKBHyQm0gU-A.png" alt="" /></p>

<h2 id="step6-test-opencv-by-running-a-program">Step6: Test OpenCV by running a program</h2>

<p>Create a new file named main.py and paste the code below. Put a dummy photo for test purposes in the third line.
 The code just converts the image to a black-white image.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import cv2
image = cv2.imread('grogu.jpeg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2.imshow('Original image',image)
cv2.imshow('Gray image', gray)
cv2.waitKey(0)
cv2.destroyAllWindows()

</code></pre></div></div>

<p>And run python3 main.py. Here’s the output</p>

<p><img src="https://miro.medium.com/max/700/1*TNiqztLHSSofkScKHTjFkw.png" alt="" /></p>

<h4 id="additional-step">Additional Step</h4>

<p>If you want to uninstall OpenCV, you can go inside the build folder and run</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo make uninstall
</code></pre></div></div>
<p><img src="https://miro.medium.com/max/700/1*xH8rWQEkKNgIzvbJtqzLZQ.png" alt="" /></p>

<p>It will remove OpenCV 4.5.0 from your system. Also, you can delete your conda environment.</p>

<p>First, deactivate if it’s activated</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda deactivate
conda remove --name testcv --all
</code></pre></div></div>

<p>It will remove completely.</p>

<h4 id="conclusion">Conclusion</h4>

<p>We were able to build and install OpenCV 4.5.0 successfully in our M1 Mac and we are able to run some code also.</p>

<p>If you have any questions, recommendations, or critiques, I can be reached via <a href="https://twitter.com/thecaffeinedev">Twitter</a> or via my <a href="iprabhatdev@gmail.com">mail</a>. Feel free to reach out to me.</p>

<p>Thanks</p>

<h3 id="references">References:</h3>

<ul>
  <li>https://sayak.dev/install-opencv-m1/</li>
  <li>https://caffeinedev.medium.com/setting-up-tensorflow-on-m1-mac-36fe017ce284</li>
  <li>https://moeenv.blog/?p=209&amp;lang=en</li>
  <li>https://github.com/apple/tensorflow_macos/</li>
</ul>]]></content><author><name>Prabhat</name><email>iprabhatdev@email.com</email></author><category term="opencv" /><category term="apple-silicon" /><summary type="html"><![CDATA[OpenCV M1 Mac Build]]></summary></entry><entry><title type="html">Setting up TensorFlow on M1 Mac</title><link href="http://localhost:4000/Setting-up-TensorFlow-on-M1-Mac/" rel="alternate" type="text/html" title="Setting up TensorFlow on M1 Mac" /><published>2021-05-27T00:00:00+00:00</published><updated>2021-05-27T00:00:00+00:00</updated><id>http://localhost:4000/Setting-up-TensorFlow-on-M1-Mac</id><content type="html" xml:base="http://localhost:4000/Setting-up-TensorFlow-on-M1-Mac/"><![CDATA[<p><img src="./m1.jpeg" alt="Cover image" />
This blog is all about setting up Tensorflow on M1 Mac.</p>

<p>Last year in November 2020 apple releases their first ARM64-based M1 chip. It got a lot of attention from everyone.
Being a tech enthusiast and a programmer, I was amazed to see the performance of the new apple M1 chip. The benchmarks were really good.</p>

<p>Recently only some months back, I bought myself an M1 Macbook Pro with 8Gigs of RAM and 512GB of SSD.</p>

<p>I wanted to set up and test how machine learning frameworks are working in this new chip. Here are the setup instructions for Tensorflow.
Currently TensorFlow 2.4 for Apple Silicon currently available from Github in release 0.1 alpha 3.</p>

<p><strong><em>Note</em></strong>: For now it cannot yet be used to a professional extend but it’s possible to work on a few prototype personal projects.</p>

<p>Before jumping into, I hope Homebrew is already installed in your system if not you can install it by running the following in your terminal</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

</code></pre></div></div>

<p>After it gets installed, install wget</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install wget
</code></pre></div></div>

<p>Here are the things that we are going to do.</p>

<ul>
  <li>Step 1: Xcode Command Line Tools</li>
  <li>Step2: Install Miniforge</li>
  <li>Step3: Create a virtual environment with python3.8</li>
  <li>Step4: Clone Tensorflow2.4 Repo from Apple and install Tensorflow &amp; its packages</li>
  <li>Step5: Install Jupyter Notebook, Pandas</li>
  <li>Step6: Run a Benchmark by training the MNIST dataset</li>
</ul>

<h2 id="step1-install-xcode-command-line-tools">Step1: Install Xcode Command Line Tools</h2>

<p>I have already installed Xcode Command Line Tools on my mac. If it’s not already installed in your system, you can install it by running the following command below in your terminal.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xcode-select --install
</code></pre></div></div>

<h2 id="step2-install-miniforge">Step2: Install Miniforge</h2>

<p>Install miniforge for arm64 (Apple Silicon) from <a href="https://github.com/conda-forge/miniforge">miniforge GitHub</a>.</p>

<p>Miniforge enables installing python packages natively compiled for Apple Silicon.</p>

<p>After the installation of miniforge, by default, it gives us one base environment. You can turn off the default base env by running</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda config --set auto_activate_base false
</code></pre></div></div>

<h3 id="step3-create-a-virtual-environment">Step3: Create a virtual environment</h3>

<p>Let’s create a virtual environment named mlp with python3.8 installed.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create --name mlp python=3.8
</code></pre></div></div>

<p>And activate it by running</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda activate mlp
</code></pre></div></div>

<h2 id="step4-installing-tensorflow-macos">Step4: Installing Tensorflow-MacOS</h2>

<p>Let’s download and install TensorFlow-macOS from <a href="https://github.com/apple/tensorflow_macos/releases/tag/v0.1alpha3">Apple Github</a></p>

<p>At this time of writing this blog Tensorflow, 0.1 alpha 3(TF 2.4) is the latest one. You can either download or you can do wget.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/apple/tensorflow_macos/releases/download/v0.1alpha3/tensorflow_macos-0.1alpha3.tar.gz
tar -xvf tensorflow_macos-0.1alpha3.tar.gz
cd tensorflow_macos/arm64
</code></pre></div></div>
<p><img src="https://miro.medium.com/max/700/1*bfvzXNHlQfZ5JCrkpJCv_A.png" alt="" /></p>

<p>Install some dependencies by running</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda install -c conda-forge -y cached-property six

pip install --upgrade --no-dependencies --force numpy-1.18.5-cp38-cp38-macosx_11_0_arm64.whl grpcio-1.33.2-cp38-cp38-macosx_11_0_arm64.whl h5py-2.10.0-cp38-cp38-macosx_11_0_arm64.whl tensorflow_addons_macos-0.1a3-cp38-cp38-macosx_11_0_arm64.whl
</code></pre></div></div>

<p><img src="https://miro.medium.com/max/700/1*c0l5GNbIub8JgAhsKTv0MQ.png" alt="" /></p>

<p>Then</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda install -c conda-forge -y absl-py astunparse gast opt_einsum termcolor wheel typing_extensions typeguard jupyter pandas
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install wrapt flatbuffers tensorflow_estimator google_pasta keras_preprocessing protobuf
</code></pre></div></div>
<p>And finally install Tensorflow</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install --upgrade --force --no-dependencies tensorflow_macos-0.1a3-cp38-cp38-macosx_11_0_arm64.whl

</code></pre></div></div>
<p><img src="https://miro.medium.com/max/700/1*07e0cfuQJc_XAIHRmvx5PQ.png" alt="" /></p>

<h2 id="step6-run-a-benchmark-by-training-the-mnist-dataset">Step6: Run a Benchmark by training the MNIST dataset</h2>

<p>Let’s install Tensorflow Datasets</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install tensorflow_datasets
</code></pre></div></div>
<p>Make sure your conda environment is activated.</p>

<p>Let’s open a Jupyter Notebook and do the benchmark. In your terminal run</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter notebook
</code></pre></div></div>

<p>It will open a browser window</p>

<p>Create a new python3 notebook</p>

<p><img src="https://miro.medium.com/max/700/1*HrbPrO84-Kep5FTakCJUcA.png" alt="" /></p>

<p>I got the code snippet from</p>

<p>https://github.com/apple/tensorflow_macos/issues/25</p>

<p>Copy and paste this code below in the new notebook</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%%time
import tensorflow.compat.v2 as tf
import tensorflow_datasets as tfds
tf.enable_v2_behavior()
from tensorflow.python.framework.ops import disable_eager_execution
disable_eager_execution()
from tensorflow.python.compiler.mlcompute import mlcompute
mlcompute.set_mlc_device(device_name='gpu')
(ds_train, ds_test), ds_info = tfds.load(
    'mnist',
    split=['train', 'test'],
    shuffle_files=True,
    as_supervised=True,
    with_info=True,
)
def normalize_img(image, label):
  """Normalizes images: `uint8` -&gt; `float32`."""
  return tf.cast(image, tf.float32) / 255., label
batch_size = 128
ds_train = ds_train.map(
    normalize_img, num_parallel_calls=tf.data.experimental.AUTOTUNE)
ds_train = ds_train.cache()
ds_train = ds_train.shuffle(ds_info.splits['train'].num_examples)
ds_train = ds_train.batch(batch_size)
ds_train = ds_train.prefetch(tf.data.experimental.AUTOTUNE)
ds_test = ds_test.map(
    normalize_img, num_parallel_calls=tf.data.experimental.AUTOTUNE)
ds_test = ds_test.batch(batch_size)
ds_test = ds_test.cache()
ds_test = ds_test.prefetch(tf.data.experimental.AUTOTUNE)
model = tf.keras.models.Sequential([
  tf.keras.layers.Conv2D(32, kernel_size=(3, 3),
                 activation='relu'),
  tf.keras.layers.Conv2D(64, kernel_size=(3, 3),
                 activation='relu'),
  tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
#   tf.keras.layers.Dropout(0.25),
  tf.keras.layers.Flatten(),
  tf.keras.layers.Dense(128, activation='relu'),
#   tf.keras.layers.Dropout(0.5),
  tf.keras.layers.Dense(10, activation='softmax')
])
model.compile(
    loss='sparse_categorical_crossentropy',
    optimizer=tf.keras.optimizers.Adam(0.001),
    metrics=['accuracy'],
)
model.fit(
    ds_train,
    epochs=12,
    validation_data=ds_test,
)

</code></pre></div></div>
<p>You will get the output below. The time to run may be different</p>

<p><img src="https://miro.medium.com/max/700/1*0avol-z4ZPVqhb5PRWG2lQ.png" alt="" /></p>

<p>It took a total of 2min 37s second to run 12 epochs with 128 batch size.</p>

<p>You can use any other code editor or any other way to do the test benchmark also.</p>

<p><strong><em>Conclusion</em></strong></p>

<p>As you can see Tensorflow is successfully installed in our system and we are able to run some code also.</p>

<p>If you have any questions, recommendations, or critiques, I can be reached via <a href="https://twitter.com/thecaffeinedev">Twitter</a> or via my <a href="iprabhatdev@gmail.com">mail</a>. Feel free to reach out to me.</p>

<h3 id="references">References:</h3>

<ul>
  <li>https://blog.tensorflow.org/2020/11/accelerating-tensorflow-performance-on-mac.html</li>
  <li>https://github.com/apple/tensorflow_macos/issues/3</li>
  <li>https://github.com/apple/tensorflow_macos</li>
  <li>https://github.com/apple/tensorflow_macos/issues/25</li>
</ul>]]></content><author><name>Prabhat</name><email>iprabhatdev@email.com</email></author><category term="apple-silicon" /><category term="tensorflow" /><summary type="html"><![CDATA[Tensorflow M1 Mac]]></summary></entry><entry><title type="html">Try Django Part-2</title><link href="http://localhost:4000/try-django-part-2/" rel="alternate" type="text/html" title="Try Django Part-2" /><published>2020-05-06T00:00:00+00:00</published><updated>2020-05-06T00:00:00+00:00</updated><id>http://localhost:4000/try-django-part-2</id><content type="html" xml:base="http://localhost:4000/try-django-part-2/"><![CDATA[<p><img src="./try_django_cover.jpg" alt="Cover image" /></p>

<p>This is the second part of our Intro To Django Tutorial, if you haven’t gone through our previous tutorial please make sure to check it out.</p>

<p>In this part of tutorial, we are going to do our migrations, create a sign up form and stuff.</p>

<p>So we need to think of our TodoApp features &amp; functionalities first.</p>

<h4 id="features">Features</h4>

<ul>
  <li>User SignUp
    <ul>
      <li>User should have an unique username</li>
      <li>User should give a password</li>
    </ul>
  </li>
  <li>User SignIn
    <ul>
      <li>After registration, user should be able to sign by using username and password</li>
    </ul>
  </li>
  <li>After SignIn
    <ul>
      <li>User should be able to add todo
        <ul>
          <li>A todo will have one title and a memo</li>
          <li>User can also specify if a todo is important or not</li>
        </ul>
      </li>
      <li>User can see the todo’s</li>
      <li>User can update, delete or mark complete on a todo.</li>
    </ul>
  </li>
  <li>User can logout</li>
</ul>

<p>So these are the features that we are going to work on.</p>

<p>Whenever we are working on this kind of projects or any big projects where there are multiple functionalities and moving pieces like here in our todo there is signup, signin, creating todo’s, listing todo’s and all, sometimes it’s harder to think like where should I even start the project.</p>

<p>So for me personally, I like to think from the User point of view, like If I am the user, If I will not be able to create todo’s without signup first right. I will not be able to logout If I don’t have an account and so on.</p>

<p>I would like to first SignUp in the website then, I will be able to login, then I will able to add my todo’s, see all todo’s, update or delete them when needed.</p>

<p>This gives us a clear idea where to being the project, like we need to implement user SignUp first, then we can work on login, logout and then we can move into creating todo objects, listing them, updating them and so on. If we kind of follow this flow, it will be really helpful for us to know where we are moving in our project.</p>

<p>Let’s go to our project folder named <strong>todo</strong> and run the server.</p>

<p><img src="./django2-1.png" alt="" /></p>

<p>You can see it’s giving us an warning saying <em>“You have 17 unapplied migration(s). “</em> so let’s do the migrations, to do it run</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py migrate
</code></pre></div></div>

<p><img src="./django2-2.png" alt="" /></p>

<p>According to documentation, Migrations are Django’s way of propagating changes you make to your models (adding a field, deleting a model, etc.) into your database schema. They’re designed to be mostly automatic, but you’ll need to know when to make migrations when to run them, and the common problems you might run into.</p>

<p>So let’s move forward and create a templates folder inside our  todoapp folder. And then create a todo folder inside the templates.</p>

<p>Then I need you to create an HTML file called ‘signupuser.html’. If you didn’t understand whatever I have written here, just look at the project structure</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> |-- todo/
 |    |-- todoapp/                &lt;-- our django app!
 |    |    |-- migrations/
 |    |    |    +-- __init__.py
 |    |    |-- templates/
 |    |    |	+-- todoapp/
 |    |    |			+-- signupuser.html
 |    |    |-- __init__.py
 |    |    |-- admin.py
 |    |    |-- apps.py
 |    |    |-- models.py
 |    |    |-- tests.py
 |    |    +-- views.py
 |    |-- todo/            			&lt;-- our django project folder!
 |    |    |-- __init__.py
 |    |    |-- asgi.py
 |    |    |-- settings.py
 |    |    |-- urls.py
 |    |    |-- wsgi.py
 |    +-- manage.py
</code></pre></div></div>

<p>Here only I have created a folder called templates inside the todoapp, and inside the templates I have created another folder called todoapp. Then inside that I have created a file called signupuser.html.</p>

<p><img src="./django2-4.png" alt="" /></p>

<p>Make sure to follow the same names and same folder structure. If you still get confused, you can checkout my Github repo for code.</p>

<p>Now open the ‘signupuser.html’ and edit it out with the code below.</p>

<p><strong><em>signupuser.html</em></strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span> Sign Up <span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div>

<p>Now open the views.py inside the todoapp folder and remove the code which was written in our previous section and replace with this code.</p>

<p><strong>views.py</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>

<span class="c1"># Create your views here.
</span><span class="k">def</span> <span class="nf">signupuser</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'todoapp/signupuser.html'</span><span class="p">)</span>

</code></pre></div></div>

<p>I hope this code is self explanatory, here in the first line we have imported render, which simply renders HTML  templates. We have already talked about HttpResponse before.</p>

<p>Then we have created a signupuser function which takes a request and it returns us the <em>signupuser.html</em> file.</p>

<p>Let’s edit the Urls.py file inside our todoapp folder. Remove the code which was written in our previous tutorial and replace with the code below.</p>

<p><strong>Urls.py</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'signup/'</span><span class="p">,</span><span class="n">views</span><span class="p">.</span><span class="n">signupuser</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span><span class="s">'signupuser'</span><span class="p">)</span>
<span class="p">]</span>
</code></pre></div></div>

<p>Again we have went through this code structure in our part-1 of the tutorial series.  Here we have added the path “signup/”.</p>

<p>Now let’s run the server</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py runserver 
</code></pre></div></div>

<p>And go to</p>

<p>http://127.0.0.1:8000/signup/</p>

<p>You will see the page below, if you are not able to see, you have done something wrong in the process.</p>

<p><img src="./django2-3.png" alt="" /></p>

<p>Now just we are simply rendering the HTML templates, for now there’s nothing except the SignUp header. Later we will add design and make it look good.</p>

<h4 id="basic-sign-up">Basic Sign Up</h4>

<p>Django has some built in tools  that you can use to set up the ability for users to log in and log out of a web application.</p>

<p>The most simple way to implement a user sign up is by using the <a href="https://docs.djangoproject.com/en/3.0/topics/auth/default/"><strong>UserCreationForm</strong></a>. If you are wondering where this form came from, remember Django comes with some of it’s in built apps. The auth app provides this form.</p>

<p>So now let’s open view.py and edit it out with the code below.</p>

<p><strong>views.py</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth.forms</span> <span class="kn">import</span> <span class="n">UserCreationForm</span>

<span class="c1"># Create your views here.
</span><span class="k">def</span> <span class="nf">signupuser</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'todoapp/signupuser.html'</span><span class="p">,</span> <span class="p">{</span><span class="s">'form'</span><span class="p">:</span><span class="n">UserCreationForm</span><span class="p">()})</span>

</code></pre></div></div>

<p>Here what’s new in this file, in the 3rd line you can see we have imported the <em>UserCreationForm</em>. This UserCreationForm gives us a basic form and we can pass it forward to our templates.</p>

<p>In the line 8, we have added a dictonary where the key is the form and the value is UserCreationForm() object.</p>

<p>Read more about why we used the dictionary in the above code from <a href="https://docs.djangoproject.com/en/3.0/ref/templates/api/#django.template.Context">documentation.</a></p>

<p>To simply understand now, we can pass the form object to our HTML template by using the UserCreationForm Object. Read more about it <a href="https://docs.djangoproject.com/en/3.0/ref/templates/language/">here.</a></p>

<p>Now let’s edit signupuser.html file.</p>

<p><strong>signupuser.html</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>SignUp<span class="nt">&lt;/h1&gt;</span>

{{ form }}

</code></pre></div></div>

<p>And now if you run the server and go to http://127.0.0.1:8000/signup/  you will be able to see the page below.</p>

<p><img src="./django2-5.png" alt="" /></p>

<p>So this Django in-built UserCreationForm gives us a basic form. If you didn’t get the syntax which we have used in the signupuser.html file. You can read more about it <a href="https://docs.djangoproject.com/en/3.0/ref/templates/language/">here.</a></p>

<p>Now let’s again edit the signupuser.html file.</p>

<p><strong>signupuser.html</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>SignUp<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"POST"</span><span class="nt">&gt;</span>

{{ form.as_p }}

<span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>Sign Up<span class="nt">&lt;/button&gt;</span>

<span class="nt">&lt;/form&gt;</span>

</code></pre></div></div>

<p>Here we have added HTML form. And the method is POST. <em>POST</em> is for writing data, meaning data will be submitted.</p>

<p>Now if you save the file and run the sever you will see the page below</p>

<p><img src="./django2-6.png" alt="" /></p>

<p>Now if you try to fill in some details in the form and if you press submit button you will get this error below. Make sure to try it out so that you understand things better.</p>

<p><img src="./django2-7.png" alt="" /></p>

<p>Now we got the error saying CSRF token missing. To fix this error</p>

<p>Edit this file</p>

<p><strong>signupuser.html</strong></p>

<script src="https://gist.github.com/TheCaffeineDev/5929a348496cfa46ff17f49fc8e12cad.js"></script>

<p>We have added something called <em>csrf_token</em></p>

<p>This is a special token aimed at combating something called Cross Site Request Forgery, which you can learn more about here: <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)"><strong>Cross-Site Request Forgery (CSRF)</strong></a>.</p>

<p>Now if you try to give some inputs and submit it, you will not get any error.</p>

<p>So that’s it for this tutorial, I hope you understood most of things from here. Try to read more from the links that I have referenced in the tutorial.</p>

<p>You can get code for this second part from my <a href="https://github.com/TheCaffeineDev/Django-TodoApp/tree/e99688c3e79cfa110ff93d92234d90a797ae180b">Github Repo</a>.</p>

<p>So that’s it for this tutorial series. I am not going to make any more part on this thing. This part is an optional tutorial of how to think more and build more features if you are building some apps.</p>

<p>Thanks for reading</p>]]></content><author><name>Prabhat</name><email>iprabhatdev@email.com</email></author><category term="django" /><category term="python" /><summary type="html"><![CDATA[Part-2 Of Django Tutorial]]></summary></entry><entry><title type="html">Try Django Part-1</title><link href="http://localhost:4000/try-django-part-1/" rel="alternate" type="text/html" title="Try Django Part-1" /><published>2020-04-23T00:00:00+00:00</published><updated>2020-04-23T00:00:00+00:00</updated><id>http://localhost:4000/try-django-part-1</id><content type="html" xml:base="http://localhost:4000/try-django-part-1/"><![CDATA[<p><img src="./try_django_cover.jpg" alt="Cover image" /></p>

<p>This is going to be a two part tutorial of how to get started with Django, learning the basics of django, understanding basics URL routing and stuff. We will discuss everything on our way of learning.</p>

<p>We are going to create a project named a todo in this tutorial. It doesn’t have any functionalities but just to understand things better, we are going to refer it like that. So let’s get started.</p>

<h3 id="what-is-django-">What is Django ?</h3>

<p><a href="https://djangoproject.com/">Django</a> is a high-level Python Web framework that encourages rapid development and clean pragmatic design. <a href="https://hackernoon.com/what-is-a-web-framework-173cac228b4"><strong>Web framework</strong></a> is a <strong>set of components</strong> designed to <strong>simplify</strong> your web development process and a standard way to develop websites fast and easily.</p>

<h3 id="who-uses-django-">Who uses Django ?</h3>

<p>Instagram, Pinterest, Bitbucket, Disqus, Dropbox, Mozilla, National Geographic, Udemy, Spotify and many more sites.</p>

<h3 id="why-you-should-use-django-">Why you should use Django ?</h3>

<ul>
  <li>It’s fast and simple</li>
  <li>Clean &amp; Rapid developement</li>
  <li>Very good documentation and high scalability.</li>
  <li>Maturity (It has been around 12 years)</li>
  <li>Default Admin Panel</li>
  <li><strong>ORM</strong>. Django is valued for its object-relational mapper that helps developers interact with databases.</li>
  <li>It is a python based framework. If you know python then you are good to go.</li>
  <li>Secure</li>
  <li>And there are a lot of reasons you should.</li>
</ul>

<h3 id="when-to-use-django-">When to use Django ?</h3>

<ul>
  <li>When you’re building a highly customizable app, such as a social media website. You don’t have to worry about reinventing the wheel.</li>
  <li>As it’s python based framework, you can<a href="https://djangopackages.org/"> utilise libraries of third-party extensions and plugins</a> to customize your app however you wish.</li>
  <li>If you want to integrate Machine learning features in future.</li>
  <li>When you don’t want to work with database queries directly, and need ORM support.</li>
  <li>When you need to move fast, deploy fast, and also make changes as you move ahead.</li>
  <li>When you need an app that can grow in depth and complexity to any scale and is capable of handling as many visitors and/or transactions as demanded, Django shines.</li>
</ul>

<h3 id="when-not-to-use-django-">When not to use Django ?</h3>

<ul>
  <li>When you need to build a very basic app, which does not require database, file operations, or anything even remotely complex.</li>
  <li>When you want to build everything from scratch, and you know what you’re doing.</li>
</ul>

<h3 id="what-you-need-to-get-started-with-django-">What you need to get started with Django ?</h3>

<ul>
  <li>Basic Knowledge Of Python 3</li>
  <li>Basic Knowledge of Web development (HTML, CSS &amp; JS)</li>
</ul>

<h2 id="lets-get-started">Let’s get started</h2>

<p>First you have to make sure that Python 3 is installed in your system. If you are using Ubuntu, you can open up your terminal check your python version like this</p>

<p><img src="./django-1-py.png" alt="" /></p>

<p>In my case I am using Python 3.7.4. I work mostly on Machine learning stuff so I am using Anaconda. You don’t need to use anaconda, you just need python installed in your system.</p>

<p>It’s a very good practice to use Virtual Environment while working on Django projects. A virtual environment is like having a sandbox for each  project. So you can play around, install packages, uninstall packages without breaking anything.</p>

<p>But in our first project we are not going to use any virtual environment. Later in other projects we will use Virtual Environment.</p>

<h3 id="lets-install-django">Let’s install Django</h3>

<p>It’s very simple, open up your terminal or cmd in case you are using windows and do</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip3 <span class="nb">install </span>django
</code></pre></div></div>

<p>It will install the latest django version. In my case I am using Django 3.0.2. But any version of Django3. will be fine for this project.</p>

<p><img src="./django-1-2.png" alt="" /></p>

<p>Now we are all set up for our first django project.</p>

<h4 id="starting-a-new-project">Starting a New Project</h4>

<p>Let’s make sure we are in Desktop</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>Desktop
</code></pre></div></div>

<p>With Django installed, we have the <em>django-admin</em> command-line tool with which we can
generate our project:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>django-admin startproject todo
</code></pre></div></div>

<p>At this point we should have an initial folder structure (in the current folder) that looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> |-- todo/             &lt;-- django project folder
 |    |-- todo/
 |    |    |-- __init__.py
 |    |    |-- asgi.py
 |    |    |-- settings.py
 |    |    |-- urls.py
 |    |    |-- wsgi.py
 |    +-- manage.py
</code></pre></div></div>

<p>Let’s go into the details of what all the files means.</p>

<ul>
  <li>
    <p><strong>manage.py :</strong>  This is the command center for making non-code changes. Whether
it’s creating a database migration, running tests, or starting the development
server, we will use this file often. It will allow us to interact with our Django project.</p>
  </li>
  <li>
    <p><strong>todo</strong> : A python package that contains the files that every Django project needs.</p>

    <ul>
      <li><strong>todo</strong>/__ init__.py : This is an empty file that is  only needed to make the other files importable. It tells that this directory should be considered as a python package.</li>
      <li><strong>todo</strong>/asgi.py : It provides an interface between asynchronous Python web servers and frameworks.</li>
      <li><strong>todo</strong>/settings.py : This is where Django stores all the configuration for our app by
default.  This file contains all the configuration of our project, and we can customize it.</li>
      <li><strong>todo</strong>/urls.py : This file contains all the URL  mappings to Python functions. Any URL that needs  to be handled by the project must have an entry here.</li>
      <li><strong>todo</strong>/wsgi.py : Web Server Gateway Interface (WSGI) is the interface between Python and a web server. You won’t touch this file very much, but it’s how your web server and your Python code know how to talk to each other.</li>
    </ul>
  </li>
</ul>

<h4 id="starting-the-web-server">Starting the web server</h4>

<p>Django comes with a simple web server installed. To run the server simply execute the command below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># make sure you are in higher todo folder

python3 manage.py runserver
</code></pre></div></div>

<p>For now, you can ignore the migration errors, we will get to that later.</p>

<p><img src="./django-1-3.png" alt="" /></p>

<p>Now open the following URL in a Web browser: <strong>http://127.0.0.1:8000</strong> and you should see the following page:</p>

<p><img src="./django1-4.png" alt="" /></p>

<p>If you see this page, this means you have successfully installed django, created a django project and run the development server.</p>

<p>Hit Control + C to stop the development server.</p>

<h3 id="django-apps">Django Apps</h3>

<p>We have two important concepts to discuss:</p>

<ul>
  <li>
    <p><strong>project</strong>: In Django, a project is an entire application. A Django project may consist of a single app, or many apps to provide its service. For your example, the <em>project</em> is the whole website.</p>
  </li>
  <li>
    <p><strong>app</strong>: is a Web application that does something. For example if you are build a e-commerce website then the examples of app would be shopping cart, payment, saved items and all. These all can be divided into multiple apps.</p>
  </li>
</ul>

<p>It’s important to note that you can’t run a Django <strong>app</strong> without a <strong>project</strong> . We have these structure because to organize the code structure and stuff.</p>

<p>So let’s create our first <strong>todo app</strong>. To create an app, go to the directory where the <strong>manage.py</strong> file is and run the following command:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>django-admin startapp todoapp
</code></pre></div></div>

<p>We have used “startapp” command this time.</p>

<p>This will give us the following directory structure</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> |-- todo/
 |    |-- todoapp/                &lt;-- our new django app!
 |    |    |-- migrations/
 |    |    |    +-- __init__.py
 |    |    |-- __init__.py
 |    |    |-- admin.py
 |    |    |-- apps.py
 |    |    |-- models.py
 |    |    |-- tests.py
 |    |    +-- views.py
 |    |-- todo/
 |    |    |-- __init__.py
 |    |    |-- asgi.py
 |    |    |-- settings.py
 |    |    |-- urls.py
 |    |    |-- wsgi.py
 |    +-- manage.py
</code></pre></div></div>

<p>So let’s understand what all the new files means.</p>

<ul>
  <li><strong>migrations/</strong>: here Django store some files to keep track of the changes you create in the <strong>models.py</strong> file, so to keep the database and the <strong>models.py</strong> synchronized.</li>
  <li><strong>admin.py</strong>: This file is used for registering your django models to the Django Administration</li>
  <li><strong>apps.py</strong>: This file is created to help the user include any application configuration for the app.</li>
  <li><strong>models.py</strong>: This file is used to write Class based Models for our Django Applications.This will be the blueprint of our database design ,relationships and attribute constraints. The models are translated automatically by Django into database tables.</li>
  <li><strong>tests.py</strong>: This file is used to write test cases for the Application. For time being we will not go into the details of this.</li>
  <li><strong>views.py</strong>: this is the file where we handle the request/response cycle of our Web application.</li>
</ul>

<p>Now that  we have created our first app, let’s configure our project to use it.</p>

<p>To do that, open the <strong>settings.py</strong> and try to find the <code class="language-plaintext highlighter-rouge">INSTALLED_APPS</code> variable:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
<span class="p">]</span>
</code></pre></div></div>

<p>As you can see, There are 6 built-in apps and they come with Django by default. Common functionalities that most Web applications need, like authentication, sessions, static files management (images, javascripts, css, etc.) and so on these apps provides us.</p>

<p>We will explore all these apps later in our series of tutorial.</p>

<p>Let’s add our todoapp in this <strong>settings.py</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
    
    <span class="s">'todoapp'</span><span class="p">,</span>
<span class="p">]</span>

</code></pre></div></div>

<p>Always remember whenever you install a new app, you should add that app in the <strong>settings.py</strong> file.</p>

<h3 id="lets-write-our-first-hello-world">Let’s Write Our First Hello World!</h3>

<p>So let’s write our first view. If you don’t understand it completely for the first time that’s fine. We will come back to these things later on also.</p>

<p>Open the <strong>views.py</strong> inside the <strong>todoapp</strong></p>

<p><strong>views.py</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>

<span class="c1"># Create your views here.
</span><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">'Hello, World!'</span><span class="p">)</span>

</code></pre></div></div>

<p>Views are python functions. Whenever a url is called in Django, it finds corresponding function that is in <strong>views.py</strong>.</p>

<p>A <em>view</em> is a place where we put the “logic” of our application.</p>

<p>Let’s go through the code closely.</p>

<ul>
  <li><strong>Line 1</strong> Imports the render() method. This is added automatically when you create an app in Django. We use this method when we want to render templates. We will cover this topic later in our series.</li>
  <li><strong>Line 2</strong>. We have imported the <strong>HttpResponse</strong> method. As you know HTTP is the communication protocol used by all web browsers. It uses request and response to pass the data. The view receives an request object and retuns an <strong>HttpResponse</strong> Object.</li>
  <li><strong>Line 5,6</strong>. This is our first view function. It’s an example of function based view. We have created a function called index. That takes  <strong>request</strong> and will return the <strong>HttpResponse</strong>. It takes a request from our web browser and returns a response. In our case the response is simple <em>Hello, World!.</em></li>
</ul>

<h3 id="configuring-the-urls">Configuring the URLs</h3>

<p>Now we have to tell Django <em>when</em> to serve this view.</p>

<p>Let’s create a new file called <strong>‘urls.py’</strong> inside our <strong>todoapp.</strong></p>

<p><strong>urls.py</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"index"</span><span class="p">),</span>
<span class="p">]</span>
</code></pre></div></div>

<p>Let’s examine this code closely:</p>

<ul>
  <li><strong>Line 1.</strong> We import the path() function.  It is used to configure URLs. In its basic form, the  <strong><em>path()</em></strong> function has a very simple syntax:</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">path</span><span class="p">(</span><span class="n">route</span><span class="p">,</span> <span class="n">view</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>
    <p><strong>Line 2</strong> . Here we import our views file from our todoapp. Here you can see we have used dot notation. A single dot means that the module referenced is in the same directory as the current location. It is good practice to use that.</p>
  </li>
  <li>
    <p><strong>Line 4.</strong> Lists the URL patterns registered for this app. For readability, the list is broken into multiple lines, with one URL pattern per line.</p>
  </li>
  <li>
    <p><strong>Line 5.</strong>  It is the the actual URL dispatcher. A request to the http://127.0.0.1:8000/ of the website would be routed to the <strong>index</strong> function in the application’s <strong>views.py</strong> file. This path takes an optional name argument and any number of additional keyword arguments passed as a Python dictionary.</p>
  </li>
  <li>
    <p><strong>views.index.</strong> Points to our index view. I.e., the dot operator is pointing to the <em>index view</em> inside the <strong>views.py</strong> file that we imported in Line 2.</p>

    <p>The <em>path()</em> function statements are kept in a special file called urls.py.</p>

    <p>Don’t worry if this is a bit confusing right now, it will make a lot more sense once you have written a couple of views.</p>
  </li>
</ul>

<p>When we created our project, it created a <strong>urls.py</strong>  file in our <strong>todo</strong> folder<em>(todo\urls.py)</em>. This is a good place for site-wide navigation but is rarely a good place to put URLs relating to individual applications. Having all our URLs in the one file is more complex and less portable and it’s bad if two apps use a view with the same name.</p>

<p>To solve this problem we create a new <strong>urls.py</strong> file for each application.</p>

<p>After doing all these, there’s one more step. We need to make some changes in our (<strong><em>todo/todo/urls.py</em></strong> ) file to make it work.</p>

<p><strong><em>todo/todo/urls.py</em></strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span><span class="p">,</span> <span class="n">include</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'admin/'</span><span class="p">,</span> <span class="n">admin</span><span class="p">.</span><span class="n">site</span><span class="p">.</span><span class="n">urls</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">'todoapp.urls'</span><span class="p">)),</span>
<span class="p">]</span>
</code></pre></div></div>

<p>We have made some changes to the file:</p>

<ul>
  <li>In <strong>Line 2</strong> we have added include() function to our imports.</li>
  <li>In <strong>Line 6</strong> we have added a URL dispatcher. This dispatcher is  simply including <strong>urls.py</strong> file from the todoapp.</li>
</ul>

<p>Now If you now run the development server, and navigate to <code class="language-plaintext highlighter-rouge">http://127.0.0.1:8000/</code> in your browser, you should this home page.</p>

<p><img src="./django-1-5.png" alt="" /></p>

<p>That’s it! You just created your very first view.</p>

<p>So this is it for this section. In our next section we will discuss more about models and stuff.</p>

<p>You can get the code from my Github Repository.</p>

<h5 id="references">References</h5>

<ul>
  <li>https://medium.com/crowdbotics/when-to-use-django-and-when-not-to-9f62f55f693b</li>
  <li>https://www.netguru.com/blog/when-to-choose-django</li>
  <li>https://djangostars.com/blog/why-we-use-django-framework/</li>
  <li>https://simpleisbetterthancomplex.com/series/2017/09/04/a-complete-beginners-guide-to-django-part-1.html</li>
  <li>https://medium.com/srp-labs/building-practical-web-applications-with-react-django-3675085a001b</li>
  <li>https://tutorial.djangogirls.org/en/django_views/</li>
  <li>https://djangobook.com/mdj2-django-views/</li>
</ul>]]></content><author><name>Prabhat</name><email>iprabhatdev@email.com</email></author><category term="django" /><category term="python" /><summary type="html"><![CDATA[Part-1 Of Django Tutorial]]></summary></entry><entry><title type="html">How to run VS Code in the browser</title><link href="http://localhost:4000/how-to-run-vs-code-in-browser/" rel="alternate" type="text/html" title="How to run VS Code in the browser" /><published>2020-01-27T00:00:00+00:00</published><updated>2020-01-27T00:00:00+00:00</updated><id>http://localhost:4000/how-to-run-vs-code-in-browser</id><content type="html" xml:base="http://localhost:4000/how-to-run-vs-code-in-browser/"><![CDATA[<p><img src="./vscode.png" alt="Cover image" /></p>

<p>I have been into this programming field since my college days and I have tried a lot of editors over time. As a developer, I believe a code editor is one of the most important tool that a developer can have.</p>

<p>Before I was happy with Sublime Text and Atom for most of the part because it could do everything I needed in my tech stack.</p>

<p>I switched to VS Code for the following reasons:</p>

<ol>
  <li><strong>Git integration</strong>: I actually prefer to use Terminal for anything to do with Git but the VS Code git system is really great.</li>
  <li><strong>Integrated terminals</strong>: You get a complete terminal emulator, out of the box.</li>
  <li><strong>Speed &amp; Extensions:</strong> VS Code is not as fast as Sublime Text but it feels faster than Atom. It has thousands of extensions available that cover pretty much every use case I can think of.</li>
  <li><strong>IntelliSense:</strong> Intellisense is incredible.VS Code has more intelligent language support, autocompletion, and suggestion. It’s super helpful, sometimes I don’t have to look up various functions and methods.</li>
  <li><strong>Completely Free:</strong> It is open source and updates are very much frequent.</li>
</ol>

<p>And there’s more.</p>

<p>Anyway, this blog post is about how to run VS Code in your browser. I am using Ubuntu 18.04 btw. Ubuntu 20.04 will also work fine.</p>

<p>First go to this URL</p>

<p><a href="https://github.com/cdr/code-server/releases/">Code server releases</a> and download the binary file for Linux.</p>

<p><img src="https://miro.medium.com/max/725/1*3d4QSZSQtmP9Q0JS2aAP5Q.png" alt="" /></p>

<p>Then unzip it.</p>

<p><img src="https://miro.medium.com/max/733/1*WfaOMKa2FvtUBY5CQm1j9A.png" alt="" /></p>

<p>Then go inside the unzipped folder.</p>

<p><img src="https://miro.medium.com/max/732/1*ehQhkcBsbCOmv_mH86e_Zw.png" alt="" /></p>

<p>Inside that folder, the code-server is the binary file and you can run it by</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./code-server
</code></pre></div></div>

<p>As you can see it’s running on my localhost.</p>

<p>If you want your own password, you can add your own password by</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PASSWORD=prabhat ./code-server --host 0.0.0.0 --port 8080
</code></pre></div></div>

<p><img src="https://miro.medium.com/max/727/1*f5MZua0HuUodU35Epy2ULA.png" alt="" /></p>

<p>You can change your port if you want to.</p>

<p>Then you have to go to your local address. In my case it’s</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://127.0.0.1:8080/
</code></pre></div></div>

<p>It will ask you to enter your password.</p>

<p><img src="./code-server-login.png" alt="" /></p>

<p>After entering your password, you will see your code server up and running.</p>

<p><img src="./code-server.png" alt="" /></p>

<p>So that’s it.</p>

<p>I do use the desktop based VSCode for day-to-day coding purpose. But sometimes when needed, running VS code on my browsers saves me time and makes me more productive.</p>

<p>And I think a code editor is simply a tool. It doesn’t matter whether you choose Sublime Text or VS Code or any other. What matters is it works for you.</p>

<p>Thanks for reading. Did this article help you out? If it did, I hope you consider sharing it. You might help someone else out. Thank you so much!</p>]]></content><author><name>Prabhat</name><email>iprabhatdev@email.com</email></author><category term="vscode" /><summary type="html"><![CDATA[vscode on browser]]></summary></entry><entry><title type="html">Customize Your Terminal On Ubuntu</title><link href="http://localhost:4000/customize-your-terminal-on-ubuntu/" rel="alternate" type="text/html" title="Customize Your Terminal On Ubuntu" /><published>2020-01-04T00:00:00+00:00</published><updated>2020-01-04T00:00:00+00:00</updated><id>http://localhost:4000/customize-your-terminal-on-ubuntu</id><content type="html" xml:base="http://localhost:4000/customize-your-terminal-on-ubuntu/"><![CDATA[<p><img src="./ub_zsh.png" alt="Cover image" /></p>

<p>In this blog post, I will cover how to install Oh My Zsh and How to customize your terminal and make it fancy.</p>

<h2 id="update-the-packages">Update the packages</h2>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt upgrade
</code></pre></div></div>

<h2 id="install-prerequisite-packages-zsh-powerline--powerline-fonts">Install prerequisite packages (ZSH, powerline &amp; powerline fonts)</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install zsh
sudo apt-get install powerline fonts-powerline
</code></pre></div></div>

<p><img src="https://miro.medium.com/max/731/1*S8VYA_Ks7YqLYK6pFPK17Q.png" alt="" /></p>

<h2 id="clone-the-oh-my-zsh-repo">Clone the Oh My Zsh Repo</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
</code></pre></div></div>

<h2 id="create-a-new-zsh-configuration-file">Create a New ZSH configuration file</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
</code></pre></div></div>

<h2 id="install-powerlevel9k">Install PowerLevel9k!</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k
</code></pre></div></div>

<h2 id="set-up-a-theme-for-your-terminal--open-zshrc-file-using-gedit-editor">Set up a theme for your Terminal — Open <code class="language-plaintext highlighter-rouge">.zshrc</code> File using gedit editor</h2>

<p>And change and put these lines :</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">"powerlevel9k/powerlevel9k"</span><span class="nv">POWERLEVEL9K_DISABLE_RPROMPT</span><span class="o">=</span><span class="nb">true
</span><span class="nv">POWERLEVEL9K_PROMPT_ON_NEWLINE</span><span class="o">=</span><span class="nb">true
</span><span class="nv">POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX</span><span class="o">=</span>”▶ “
<span class="nv">POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX</span><span class="o">=</span>””
</code></pre></div></div>

<p><img src="https://miro.medium.com/max/766/1*_hi0hSXi8tXqWirDCMU5nQ.png" alt="" /></p>

<h2 id="change-your-default-shell">Change your Default Shell</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chsh -s /bin/zsh
</code></pre></div></div>

<p>for this command to be effective you need to restart your system.</p>

<h1 id="oh-my-zsh-terminal">Oh My Zsh Terminal</h1>

<p>After restarting your terminal will look like this :</p>

<p><img src="https://miro.medium.com/max/724/1*gW98D-UxTS7m1IAC-pMtxw.png" alt="" /></p>

<h2 id="if-you-want-syntax-highlighting">If you want Syntax Highlighting</h2>

<p>Clone the ZSH Syntax Highlighting</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git “$HOME/.zsh-syntax-highlighting” — depth 1
</code></pre></div></div>

<p>Add syntax-highlighting in <code class="language-plaintext highlighter-rouge">.zshrc</code> Configuration</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo “source $HOME/.zsh-syntax-highlighting/zsh-syntax-highlighting.zsh” &gt;&gt; “$HOME/.zshrc”
</code></pre></div></div>

<p>And If anything goes wrong, you can revert back to your default shell by</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chsh -s /bin/bash
</code></pre></div></div>

<p>If you are a data science enthusiast and using anaconda then you need to add these lines below in zshrc file.</p>

<p>Open a terminal and</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gedit .zshrc
</code></pre></div></div>

<p>add these. Make sure to change your username after home.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="se">\#</span> <span class="o">&gt;&gt;&gt;</span> conda initialize <span class="o">&gt;&gt;&gt;</span>
<span class="se">\#</span> <span class="o">!!</span> Contents within this block are managed by ‘conda init’ <span class="o">!!</span>
<span class="nv">__conda_setup</span><span class="o">=</span>”<span class="si">$(</span>‘/home/yourusername/anaconda3/bin/conda’ ‘shell.bash’ ‘hook’ 2&gt; /dev/null<span class="si">)</span>”
<span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
 </span><span class="nb">eval</span> “<span class="nv">$__conda_setup</span>”
<span class="k">else
 if</span> <span class="o">[</span> <span class="nt">-f</span> “/home/yourusername/anaconda3/etc/profile.d/conda.sh” <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
 <span class="nb">.</span> “/home/yourusername/anaconda3/etc/profile.d/conda.sh”
 <span class="k">else
 </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>”/home/yourusername/anaconda3/bin:<span class="nv">$PATH</span>”
 <span class="k">fi
fi
</span><span class="nb">unset </span>__conda_setup
<span class="se">\#</span> <span class="o">&lt;&lt;&lt;</span> conda initialize <span class="o">&lt;&lt;&lt;</span>
</code></pre></div></div>

<p>Mine looks like this.</p>

<p><img src="https://miro.medium.com/max/768/1*CtxgScchhgnV_bVhXiz0eg.png" alt="" /></p>

<p>Then do</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source ./zshrc
</code></pre></div></div>

<p>There are a lot of customization available. You can check Oh my zsh and Powerlevel9k repository.</p>

<p>If you have any questions, recommendations or critiques, I can be reached via <a href="https://twitter.com/thecaffeinedev">Twitter</a> or via my <a href="mailto:iprabhatdev@gmail.com">mail</a>. Feel free to reach out to me.</p>

<p><strong><em>Thank You</em></strong></p>

<p><strong>Acknowledgment</strong></p>

<ol>
  <li><a href="https://github.com/ohmyzsh/ohmyzsh">Oh My Zsh — </a></li>
  <li><a href="https://github.com/Powerlevel9k/powerlevel9k">Powelevel9k</a></li>
</ol>]]></content><author><name>Prabhat</name><email>iprabhatdev@email.com</email></author><category term="ubuntu" /><category term="terminal" /><summary type="html"><![CDATA[customize your terminal on Ubuntu]]></summary></entry></feed>