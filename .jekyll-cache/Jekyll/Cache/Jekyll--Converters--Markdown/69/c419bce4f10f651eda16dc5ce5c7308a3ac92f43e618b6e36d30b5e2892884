I"ñ$<p><img src="./m1.jpeg" alt="Cover image" />
This blog is all about setting up Tensorflow on M1 Mac.</p>

<p>Last year in November 2020 apple releases their first ARM64-based M1 chip. It got a lot of attention from everyone.
Being a tech enthusiast and a programmer, I was amazed to see the performance of the new apple M1 chip. The benchmarks were really good.</p>

<p>Recently only some months back, I bought myself an M1 Macbook Pro with 8Gigs of RAM and 512GB of SSD.</p>

<p>I wanted to set up and test how machine learning frameworks are working in this new chip. Here are the setup instructions for Tensorflow.
Currently TensorFlow 2.4 for Apple Silicon currently available from Github in release 0.1 alpha 3.</p>

<p><strong><em>Note</em></strong>: For now it cannot yet be used to a professional extend but itâ€™s possible to work on a few prototype personal projects.</p>

<p>Before jumping into, I hope Homebrew is already installed in your system if not you can install it by running the following in your terminal</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

</code></pre></div></div>

<p>After it gets installed, install wget</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install wget
</code></pre></div></div>

<p>Here are the things that we are going to do.</p>

<ul>
  <li>Step 1: Xcode Command Line Tools</li>
  <li>Step2: Install Miniforge</li>
  <li>Step3: Create a virtual environment with python3.8</li>
  <li>Step4: Clone Tensorflow2.4 Repo from Apple and install Tensorflow &amp; its packages</li>
  <li>Step5: Install Jupyter Notebook, Pandas</li>
  <li>Step6: Run a Benchmark by training the MNIST dataset</li>
</ul>

<h2 id="step1-install-xcode-command-line-tools">Step1: Install Xcode Command Line Tools</h2>

<p>I have already installed Xcode Command Line Tools on my mac. If itâ€™s not already installed in your system, you can install it by running the following command below in your terminal.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xcode-select --install
</code></pre></div></div>

<h2 id="step2-install-miniforge">Step2: Install Miniforge</h2>

<p>Install miniforge for arm64 (Apple Silicon) from <a href="https://github.com/conda-forge/miniforge">miniforge GitHub</a>.</p>

<p>Miniforge enables installing python packages natively compiled for Apple Silicon.</p>

<p>After the installation of miniforge, by default, it gives us one base environment. You can turn off the default base env by running</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda config --set auto_activate_base false
</code></pre></div></div>

<h3 id="step3-create-a-virtual-environment">Step3: Create a virtual environment</h3>

<p>Letâ€™s create a virtual environment named mlp with python3.8 installed.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create --name mlp python=3.8
</code></pre></div></div>

<p>And activate it by running</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda activate mlp
</code></pre></div></div>

<h2 id="step4-installing-tensorflow-macos">Step4: Installing Tensorflow-MacOS</h2>

<p>Letâ€™s download and install TensorFlow-macOS from <a href="https://github.com/apple/tensorflow_macos/releases/tag/v0.1alpha3">Apple Github</a></p>

<p>At this time of writing this blog Tensorflow, 0.1 alpha 3(TF 2.4) is the latest one. You can either download or you can do wget.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/apple/tensorflow_macos/releases/download/v0.1alpha3/tensorflow_macos-0.1alpha3.tar.gz
tar -xvf tensorflow_macos-0.1alpha3.tar.gz
cd tensorflow_macos/arm64
</code></pre></div></div>
<p><img src="https://miro.medium.com/max/700/1*bfvzXNHlQfZ5JCrkpJCv_A.png" alt="" /></p>

<p>Install some dependencies by running</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda install -c conda-forge -y cached-property six

pip install --upgrade --no-dependencies --force numpy-1.18.5-cp38-cp38-macosx_11_0_arm64.whl grpcio-1.33.2-cp38-cp38-macosx_11_0_arm64.whl h5py-2.10.0-cp38-cp38-macosx_11_0_arm64.whl tensorflow_addons_macos-0.1a3-cp38-cp38-macosx_11_0_arm64.whl
</code></pre></div></div>

<p><img src="https://miro.medium.com/max/700/1*c0l5GNbIub8JgAhsKTv0MQ.png" alt="" /></p>

<p>Then</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda install -c conda-forge -y absl-py astunparse gast opt_einsum termcolor wheel typing_extensions typeguard jupyter pandas
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install wrapt flatbuffers tensorflow_estimator google_pasta keras_preprocessing protobuf
</code></pre></div></div>
<p>And finally install Tensorflow</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install --upgrade --force --no-dependencies tensorflow_macos-0.1a3-cp38-cp38-macosx_11_0_arm64.whl

</code></pre></div></div>
<p><img src="https://miro.medium.com/max/700/1*07e0cfuQJc_XAIHRmvx5PQ.png" alt="" /></p>

<h2 id="step6-run-a-benchmark-by-training-the-mnist-dataset">Step6: Run a Benchmark by training the MNIST dataset</h2>

<p>Letâ€™s install Tensorflow Datasets</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install tensorflow_datasets
</code></pre></div></div>
<p>Make sure your conda environment is activated.</p>

<p>Letâ€™s open a Jupyter Notebook and do the benchmark. In your terminal run</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter notebook
</code></pre></div></div>

<p>It will open a browser window</p>

<p>Create a new python3 notebook</p>

<p><img src="https://miro.medium.com/max/700/1*HrbPrO84-Kep5FTakCJUcA.png" alt="" /></p>

<p>I got the code snippet from</p>

<p>https://github.com/apple/tensorflow_macos/issues/25</p>

<p>Copy and paste this code below in the new notebook</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%%time
import tensorflow.compat.v2 as tf
import tensorflow_datasets as tfds
tf.enable_v2_behavior()
from tensorflow.python.framework.ops import disable_eager_execution
disable_eager_execution()
from tensorflow.python.compiler.mlcompute import mlcompute
mlcompute.set_mlc_device(device_name='gpu')
(ds_train, ds_test), ds_info = tfds.load(
    'mnist',
    split=['train', 'test'],
    shuffle_files=True,
    as_supervised=True,
    with_info=True,
)
def normalize_img(image, label):
  """Normalizes images: `uint8` -&gt; `float32`."""
  return tf.cast(image, tf.float32) / 255., label
batch_size = 128
ds_train = ds_train.map(
    normalize_img, num_parallel_calls=tf.data.experimental.AUTOTUNE)
ds_train = ds_train.cache()
ds_train = ds_train.shuffle(ds_info.splits['train'].num_examples)
ds_train = ds_train.batch(batch_size)
ds_train = ds_train.prefetch(tf.data.experimental.AUTOTUNE)
ds_test = ds_test.map(
    normalize_img, num_parallel_calls=tf.data.experimental.AUTOTUNE)
ds_test = ds_test.batch(batch_size)
ds_test = ds_test.cache()
ds_test = ds_test.prefetch(tf.data.experimental.AUTOTUNE)
model = tf.keras.models.Sequential([
  tf.keras.layers.Conv2D(32, kernel_size=(3, 3),
                 activation='relu'),
  tf.keras.layers.Conv2D(64, kernel_size=(3, 3),
                 activation='relu'),
  tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
#   tf.keras.layers.Dropout(0.25),
  tf.keras.layers.Flatten(),
  tf.keras.layers.Dense(128, activation='relu'),
#   tf.keras.layers.Dropout(0.5),
  tf.keras.layers.Dense(10, activation='softmax')
])
model.compile(
    loss='sparse_categorical_crossentropy',
    optimizer=tf.keras.optimizers.Adam(0.001),
    metrics=['accuracy'],
)
model.fit(
    ds_train,
    epochs=12,
    validation_data=ds_test,
)

</code></pre></div></div>
<p>You will get the output below. The time to run may be different</p>

<p><img src="https://miro.medium.com/max/700/1*0avol-z4ZPVqhb5PRWG2lQ.png" alt="" /></p>

<p>It took a total of 2min 37s second to run 12 epochs with 128 batch size.</p>

<p>You can use any other code editor or any other way to do the test benchmark also.</p>

<p><strong><em>Conclusion</em></strong></p>

<p>As you can see Tensorflow is successfully installed in our system and we are able to run some code also.</p>

<p>If you have any questions, recommendations, or critiques, I can be reached via <a href="https://twitter.com/thecaffeinedev">Twitter</a> or via my <a href="iprabhatdev@gmail.com">mail</a>. Feel free to reach out to me.</p>

<h3 id="references">References:</h3>

<ul>
  <li>https://blog.tensorflow.org/2020/11/accelerating-tensorflow-performance-on-mac.html</li>
  <li>https://github.com/apple/tensorflow_macos/issues/3</li>
  <li>https://github.com/apple/tensorflow_macos</li>
  <li>https://github.com/apple/tensorflow_macos/issues/25</li>
</ul>
:ET